// Generated by view binder compiler. Do not edit!
package com.codunite.rechargeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.codunite.rechargeapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemWallethistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView cardview;

  @NonNull
  public final TextView closingbalance;

  @NonNull
  public final RelativeLayout layTop;

  @NonNull
  public final LinearLayout llDesc;

  @NonNull
  public final LinearLayout llLeft;

  @NonNull
  public final LinearLayout llRight;

  @NonNull
  public final LinearLayout lytParent;

  @NonNull
  public final LinearLayout openbal;

  @NonNull
  public final TextView openingbalance;

  @NonNull
  public final TextView rechargedesc;

  @NonNull
  public final RelativeLayout rlColor;

  @NonNull
  public final ImageView viewColor;

  @NonNull
  public final TextView vmMemberid;

  @NonNull
  public final TextView vmName;

  private ItemWallethistoryBinding(@NonNull LinearLayout rootView, @NonNull CardView cardview,
      @NonNull TextView closingbalance, @NonNull RelativeLayout layTop,
      @NonNull LinearLayout llDesc, @NonNull LinearLayout llLeft, @NonNull LinearLayout llRight,
      @NonNull LinearLayout lytParent, @NonNull LinearLayout openbal,
      @NonNull TextView openingbalance, @NonNull TextView rechargedesc,
      @NonNull RelativeLayout rlColor, @NonNull ImageView viewColor, @NonNull TextView vmMemberid,
      @NonNull TextView vmName) {
    this.rootView = rootView;
    this.cardview = cardview;
    this.closingbalance = closingbalance;
    this.layTop = layTop;
    this.llDesc = llDesc;
    this.llLeft = llLeft;
    this.llRight = llRight;
    this.lytParent = lytParent;
    this.openbal = openbal;
    this.openingbalance = openingbalance;
    this.rechargedesc = rechargedesc;
    this.rlColor = rlColor;
    this.viewColor = viewColor;
    this.vmMemberid = vmMemberid;
    this.vmName = vmName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemWallethistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemWallethistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_wallethistory, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemWallethistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardview;
      CardView cardview = ViewBindings.findChildViewById(rootView, id);
      if (cardview == null) {
        break missingId;
      }

      id = R.id.closingbalance;
      TextView closingbalance = ViewBindings.findChildViewById(rootView, id);
      if (closingbalance == null) {
        break missingId;
      }

      id = R.id.lay_top;
      RelativeLayout layTop = ViewBindings.findChildViewById(rootView, id);
      if (layTop == null) {
        break missingId;
      }

      id = R.id.ll_desc;
      LinearLayout llDesc = ViewBindings.findChildViewById(rootView, id);
      if (llDesc == null) {
        break missingId;
      }

      id = R.id.ll_left;
      LinearLayout llLeft = ViewBindings.findChildViewById(rootView, id);
      if (llLeft == null) {
        break missingId;
      }

      id = R.id.ll_right;
      LinearLayout llRight = ViewBindings.findChildViewById(rootView, id);
      if (llRight == null) {
        break missingId;
      }

      LinearLayout lytParent = (LinearLayout) rootView;

      id = R.id.openbal;
      LinearLayout openbal = ViewBindings.findChildViewById(rootView, id);
      if (openbal == null) {
        break missingId;
      }

      id = R.id.openingbalance;
      TextView openingbalance = ViewBindings.findChildViewById(rootView, id);
      if (openingbalance == null) {
        break missingId;
      }

      id = R.id.rechargedesc;
      TextView rechargedesc = ViewBindings.findChildViewById(rootView, id);
      if (rechargedesc == null) {
        break missingId;
      }

      id = R.id.rl_color;
      RelativeLayout rlColor = ViewBindings.findChildViewById(rootView, id);
      if (rlColor == null) {
        break missingId;
      }

      id = R.id.view_color;
      ImageView viewColor = ViewBindings.findChildViewById(rootView, id);
      if (viewColor == null) {
        break missingId;
      }

      id = R.id.vm_memberid;
      TextView vmMemberid = ViewBindings.findChildViewById(rootView, id);
      if (vmMemberid == null) {
        break missingId;
      }

      id = R.id.vm_name;
      TextView vmName = ViewBindings.findChildViewById(rootView, id);
      if (vmName == null) {
        break missingId;
      }

      return new ItemWallethistoryBinding((LinearLayout) rootView, cardview, closingbalance, layTop,
          llDesc, llLeft, llRight, lytParent, openbal, openingbalance, rechargedesc, rlColor,
          viewColor, vmMemberid, vmName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
